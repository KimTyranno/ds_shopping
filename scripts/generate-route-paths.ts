import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

// ES Module 환경에서 __dirname 만들기
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const GROUPS = ['(auth)', '(public)', '(protected)'] as const
type Group = (typeof GROUPS)[number]

// locale 경로 하위 폴더위치
const APP_DIR = path.resolve(__dirname, '../src/app/[locale]')

// 자동 생성할 경로 및 파일
const OUTPUT_DIR = path.resolve(__dirname, '../src/constants')
const isTemp = process.argv.includes('--temp')
const filename = isTemp ? 'paths.temp.ts' : 'paths.ts'
const OUTPUT_FILE = path.resolve(OUTPUT_DIR, filename)

// 폴더가 없으면 생성
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true })
}

/** 현재 폴더 혹은 하위폴더에 page.* 파일이 있는지 검사 */
function hasPageFile(folderPath: string): boolean {
  if (!fs.existsSync(folderPath)) return false

  const entries = fs.readdirSync(folderPath, { withFileTypes: true })

  // 폴더 내에 직접 page.* 파일 있는지 확인
  if (entries.some(entry => entry.isFile() && entry.name.startsWith('page.'))) {
    return true
  }

  // 하위 폴더 중에 page.*가 있으면 true
  for (const entry of entries) {
    if (entry.isDirectory()) {
      // 재귀적으로 검사
      if (hasPageFile(path.join(folderPath, entry.name))) {
        return true
      }
    }
  }

  return false
}

/** 그룹별(auth, public, protected) route 경로 수집하는 함수 */
function getRoutesFromGroup(group: Group): string[] {
  const groupPath = path.join(APP_DIR, group)
  if (!fs.existsSync(groupPath)) return []

  // 그룹 폴더 내 첫 단계 폴더 혹은 파일 목록
  const entries = fs.readdirSync(groupPath, { withFileTypes: true })
  const routes: string[] = []

  for (const entry of entries) {
    const entryPath = path.join(groupPath, entry.name)

    if (entry.isDirectory()) {
      // 현재 폴더 안에 page.* 파일이 있거나 하위 폴더에 있으면 경로 추가
      if (hasPageFile(entryPath)) {
        routes.push(`/${entry.name}`)
      }
    } else if (entry.name.startsWith('page.')) {
      // 그룹 루트에 page.* 파일이 있으면 루트 경로 '/'
      routes.push('/')
    }
  }

  return routes
}

/** 전체 그룹을 순회해서 경로 파일을 생성하는 함수 */
function generatePaths() {
  const pathsByGroup: Record<string, string[]> = {}

  for (const group of GROUPS) {
    // (auth) => AUTH_PATHS 이런 형식으로 상수명 생성
    const groupName = group.replace(/[()]/g, '').toUpperCase()
    pathsByGroup[`${groupName}_PATHS`] = getRoutesFromGroup(group)
  }

  // 파일 헤더 (자동 생성 경고)
  // const header = `// 🔒 Auto-generated by generate-route-paths.ts — DO NOT EDIT MANUALLY\n\n`
  const header = `// 🔒 자동 생성되는 파일이므로 수정으로 편집하지 말것 \n\n`

  // 경로별로 export 코드 생성
  const content = Object.entries(pathsByGroup)
    .map(([constName, paths]) => {
      return `export const ${constName} = ${JSON.stringify(paths, null, 2)};`
    })
    .join('\n\n')

  // 최종 파일 쓰기
  fs.writeFileSync(OUTPUT_FILE, header + content + '\n')
  console.log(`✅ ${filename} generated at src/constants/${filename}`)
}

generatePaths()
